info.system=Polar Bookshop
logging.group.circuitbreaker=io.github.resilience4j, org.springframework.cloud.circuitbreaker
logging.level.circuitbreaker=info
logging.pattern.level=%5p [${spring.application.name},%X{trace_id},%X{span_id}]
management.endpoints.web.exposure.include=configprops, env, gateway, health, heapdump, info, loggers, mappings, prometheus
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoint.health.probes.enabled=true
management.info.env.enabled=true
management.info.java.enabled=true
management.info.os.enabled=true
management.metrics.tags.application=${spring.application.name}
resilience4j.circuitbreaker.configs.default.slidingWindowSize=20
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=5
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=15000
resilience4j.timelimiter.configs.default.timeoutDuration=5s
spring.cloud.consul.port=8500
spring.cloud.consul.host=127.0.0.1
spring.cloud.consul.enabled=true
spring.cloud.config.enabled=false
spring.cloud.config.uri=http://localhost:8888
spring.cloud.config.request-connect-timeout=5000
spring.cloud.config.request-read-timeout=5000
spring.cloud.config.fail-fast=false
spring.cloud.config.retry.max-attempts=6
spring.cloud.config.retry.initial-interval=1000
spring.cloud.config.retry.max-interval=2000
spring.cloud.config.retry.multiplier=1.1
spring.cloud.gateway.httpclient.connect-timeout=2000
spring.cloud.gateway.httpclient.response-timeout=5s
spring.cloud.gateway.httpclient.pool.type=elastic
spring.cloud.gateway.httpclient.pool.max-idle-time=15s
spring.cloud.gateway.httpclient.pool.max-life-time=60s
spring.cloud.gateway.default-filters=[TokenRelay=, {name=Retry, args={retries=3, methods=GET, series=SERVER_ERROR, exceptions=java.io.IOException, java.util.concurrent.TimeoutException, backoff={firstBackoff=50ms, maxBackOff=500ms, factor=2, basedOnPreviousValue=false}}}]
spring.cloud.gateway.routes=[{id=route, uri=http://localhost:9980/, predicates=[Path=/**]}]
spring.security.oauth2.client.registration.gateway.provider=spring
spring.security.oauth2.client.registration.gateway.client-id=client
spring.security.oauth2.client.registration.gateway.client-secret=secret
spring.security.oauth2.client.registration.gateway.scope=openid, profile, user.read
spring.security.oauth2.client.registration.gateway.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.gateway.client-authorization-method=client_secret_basic
spring.security.oauth2.client.registration.gateway.redirect-uri=http://127.0.0.1:9999/login/oauth2/code/spring
spring.security.oauth2.client.provider.spring.issuer-uri=http://localhost:9000
